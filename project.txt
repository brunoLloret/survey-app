Overview
Your goal today is to build a simple full-stack application (that means frontend AND backend AND database).

You will be using ExpressJS to serve static HTML forms and handle submissions, and you may use Claude / ChatGPT to ask questions, but NOT to copy code. You cannot use Cursor or Github Copilot or any form of AI code-writer. Type every character of code yourself -- don’t even copy from the docs. You will be surprised how much muscle memory matters.

A survey app is exactly what it sounds like: an app to create surveys and collect anonymous survey results. It needs to:
Create New Surveys
Show all Past Surveys, with links to “survey results” and “take this survey” screens,
Allow a user to take a survey, submit the survey, and see “success, thank you for submitting”.

YOU DO NOT NEED AUTHENTICATION FOR THIS APP.

A survey app covers a full stack application. Focus on getting the underlying functionality in place, and then clean up the UI/UX with Daisy/Tailwind. 
Core Concepts
CRUD
Data Modelling
ORMs
HTML + CSS + Forms
Features
Your Survey App should have the following, built with simple HTML templates OR React, served via Express.

NOTE: You may swap to React at any time; no need to wait until you’ve built the whole thing with HTML Templates. I recommend swapping to React if you feel too confused with HTML templates.

4 Views

List of Surveys

Survey Creation

Survey Submission + Success Screen
Survey Results

List of Existing Surveys

Go to creation/submission/results

Each survey should link to “take this survey” and “view results for this survey” pages

Survey Creation

Be able to add multiple survey blocks (questions)
Be able to update a survey block
Be able to delete a survey block
Generate a link to take the survey
Survey Submission
Be able to respond (anonymously) to a survey (series of questions) and have your answer recorded
All survey answers are freeform text responses

Survey Results
View a list of responses

Bonus:
Allow multiple survey block types (multiple choice, range, date)
Aggregate results in the Survey Results View
When a question is answered, minimize the survey block



******

1. Welcome page

2. Existing surveys
/surveys


-> Take any survey
/surveys/{surveyId}/
    -> Answer questions
        /surveys/{surveyId}/{questionId} -> Q: is it necessary to make the path of the question explicit? I don't think so
        
    -> Submit survey
        -> POST db surveyId -> questionId with SurveyResponse
    
    -> Options:
    See statistics -> path: /surveys/{surveyId}/statistics element: <Statistics />
    Go back to main -> path: /home element: <Home />
    Go back to Surveys -> path: /surveys element <Surveys />

3. Survey Creator

-> Actions: add title (onChange, onSubmit), add Question, create Survey (assign id and send to db), publish Survey (isPublished: true), generate link 


-> Create survey
-> We create and handle diverse states, then we create the survey 

    -> Id is automatic
    -> Add title (required)
    -> Add multiple survey blocks (questions) (at least 1 required)
    
-> Create survey once blocks are done
    -> Store it in db 
    -> IsPublished true
    -> Generate a link to take the survey
        -> path: /surveys/{surveyId}/
    -> Options: Take the survey / go back to Create survey / Go back to main

-> Edit a survey

-> See all surveys by title. They can be organized by Id order, or title order.
    -> Once you click on one, that survey is rendered.
    -> Title?
    -> Block? -> Display number/section and title of block/question Edit/delete
-> Delete a survey
    -> Delete all? Confirmation


Steps:
1> The basic routing, paths, layouts and pages have been defined.
2> The types and interfaces have been defined.
3> Basic components Footer, Header and NavBar have been hard-coded.

To do:
4> Write the FormComponents
    -> FormComponents define the interface of all the possible parts of a Survey
    -> Write Survey component